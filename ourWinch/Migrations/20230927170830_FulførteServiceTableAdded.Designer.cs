// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ourWinch.Utility;

#nullable disable

namespace ourWinch.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20230927170830_FulførteServiceTableAdded")]
    partial class FulførteServiceTableAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ourWinch.Models.AktiveServiser", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("AvtaltLevering")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeilBeskriving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kunde")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MottattDato")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceSkjema")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timer")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.ToTable("AktivServis");
                });

            modelBuilder.Entity("ourWinch.Models.FulførteService", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("AvtaltLevering")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeilBeskriving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kunde")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MottattDato")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceSkjema")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timer")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.ToTable("FulførtService");
                });
#pragma warning restore 612, 618
        }
    }
}
